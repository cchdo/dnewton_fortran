#!/usr/bin/env python
''' sumqwk.py
Loads and validates the identifying parameters (expocode/ship, section,
stnnbr, castno, ctype) for an entry in a WOCE summary file.
    load(7)
        Attempts to find a value by matching the current line against
        given column limits.
        NB. Also used by sumun1 to load remaining (non-identifying)
            parameters.
    sumqwk(4)
        Tries to load the identifying parameters of the current line.
        TODO specify a uniform interface between sumqwk() and sumun1();
             both should return hashes (dictionaries).
'''

execfile('libsumchk.py')

def load(line,
         param_index, begin, end,
         max,
         missing_message,
         too_big_message,):
  '''Loads the value of a parameter on this line.
     line              The current line
     param_index       parameter ID (see sumchk2_h: sumlim consts)
     begin             beginning index of this parameter
     end               end index of this parameter
     max               maximum length of value
     missing_message   error message if value is missing
     too_big_message   error message if value is too long
     returns a 2-tuple containing the loaded value and a number representing
     the errlevel generated by loading the value.
  '''
  global _perr, current_line, overlarge, read_err
  if begin != -1:
    c = ''
    try:
      c = line[begin:end].strip()
    except IndexError:
      pass
    if len(c) == 0:
      # FIXME ignore missing parameter value
      #print >> sys.stderr, missing_message
      return (None, 0)
    elif len(c) > max:
      if _perr:
        print >> sys.stderr, too_big_message
      overlarge.append(current_line)
      return (None, 2)
    else:
      return (c, 0)
  else:
    # parameter missing to begin with
    return (None, 0)

def sumqwk(line, begin, end, first,):
  global _perr, missing, current_line
  expocode = None
  stnnbr   = None
  castno   = -9
  ctype    = None # cast type
  tcode    = None # time code
  _        = 0    # return value

  __ = load(line, EXPOCODE, begin[EXPOCODE], end[EXPOCODE],
            MAXIMUM(EXPOCODE), MISSING(EXPOCODE,'sumqwk'), OVERLARGE(EXPOCODE,'sumqwk'))
  expocode  = __[0] # unpack
  _        |= __[1]

  if first:
    # save expocode as master copy
    GLOBAL_EXPOCODE = expocode
    first = False
  else:
    if GLOBAL_EXPOCODE != expocode:
      # abort if expocode does not match
      # FIXME?
      return (None, None, -9, None, None, -1)

  __ = load(line, STNNBR, begin[STNNBR], end[STNNBR],
            MAXIMUM(STNNBR), MISSING(STNNBR,'sumqwk'), OVERLARGE(STNNBR,'sumqwk'))
  stnnbr  = __[0] # unpack
  _      |= __[1]

  __ = load(line, CASTNO, begin[CASTNO], end[CASTNO],
            MAXIMUM(CASTNO), MISSING(CASTNO,'sumqwk'), OVERLARGE(CASTNO,'sumqwk'))
  try:
    if __[0] is None:
      missing.append(current_line)
      castno = -9
    else:
      castno  = int(__[0]) # unpack
      _      |=     __[1]
  except ValueError: # invalid castno
    if _perr:
      print >> sys.stderr, " sumqwk: can't convert %s to int" % __[0]
    _ = 2

  __ = load(line, CASTTYPE, begin[CASTTYPE], end[CASTTYPE],
            MAXIMUM(CASTTYPE), MISSING(CASTTYPE,'sumqwk'), OVERLARGE(CASTTYPE,'sumqwk'))
  ctype  = __[0] # unpack
  _     |= __[1]

  __ = load(line, TIMECODE, begin[TIMECODE], end[TIMECODE],
            MAXIMUM(TIMECODE), MISSING(TIMECODE,'sumqwk'), OVERLARGE(TIMECODE,'sumqwk'))
  tcode  = __[0] # unpack
  _     |= __[1]

  # FIXME return {'EXPOCODE': expocode, 'STNNBR': stnnbr, 'CASTNO': castno,
  #               'CTYPE': ctype, 'TCODE': tcode, '_': _}
  return (expocode, stnnbr, castno, ctype, tcode, _)
