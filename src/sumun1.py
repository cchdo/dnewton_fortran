#!/usr/bin/env python
from re import match, split
''' sumun1.py
Loads non-identifying parameters from a WOCE summary file.
    sumun1_load(4)
        Uniform parser for non-identifying parameters.
        NB. REQUIRES sumqwk: load(7)
    sumun1(3)
        Loads non-identifying parameters.
'''

execfile('libwocecvt.py')
execfile('libsumchk.py')
execfile('sumqwk.py')

def sumun1_load(line, param_index, begin, end,):
  ''' Loads the value of a non-identifying parameter from the current line.
      line             current line
      param_index      parameter ID (see sumchk2_h: sumlim consts)
      begin            begining index of this parameter
      end              end index of this parameter
      returns a 2-tuple containing the value of the parameter on the current
      line and whether an error was generated by loading the value.
  '''
  global _perr, current_line, missing, strange, read_err
  global _illegal_no_data_dash, KNOWN_TCODES
  # expocode => (ship, expocode)
  if param_index == EXPOCODE:
    c, _ = load(line, param_index, begin, end, MAXIMUM(EXPOCODE),
                MISSING(EXPOCODE,'sumun1'), OVERLARGE(EXPOCODE,'sumun1'))
    if c is None:
      missing.append(current_line)
      return (None, None, True)
    elif len(c) < 0:
      return (c, c, True)
    return (c[:4], c, (_!=0))

  # direct strict-length string
  elif param_index in [SECTION, STNNBR, CASTNO,
                     CASTTYPE, NAV_CODE]:
    c, _ = load(line, param_index, begin, end, MAXIMUM(param_index),
                MISSING(param_index,'sumun1'), OVERLARGE(param_index,'sumun1'))
    return (c, (_!=0))

  # timecode
  elif param_index == TIMECODE:
    c, _ = load(line, param_index, begin, end, MAXIMUM(TIMECODE),
                MISSING(TIMECODE,'sumun1'), OVERLARGE(TIMECODE,'sumun1'))
    if c not in KNOWN_TCODES:
      if _perr:
        print >> sys.stderr, " sumun1: time code %s not recognized" % c
      strange.append(current_line)
      return (c, True)
    return (c, (_!=0))

  # direct truncated string
  elif param_index in [PARAMS, COMMENTS]:
    # FIXME (AS) using MAX_PROCESSABLE_LINES as Infinity
    c, _ = load(line, param_index, begin, end, MAX_PROCESSABLE_LINES,
                MISSING(param_index,'sumun1'), OVERLARGE(param_index,'sumun1'))
    if c is None:
      return ('', (_!=0))
    elif len(c) > max:
      overlarge.append(current_line)
      return (c[:max], (_!=0))
    else:
      return (c, (_!=0))

  # numeric
  elif param_index in [CASTNO, DEPTH_UNC, CDEPTH, BOTTOMHT,
                       WHEEL_MT, PRESS_MX, BOTTLES]:
    c, _ = load(line, param_index, begin, end, MAXIMUM(param_index),
                MISSING(param_index,'sumun1'), OVERLARGE(param_index,'sumun1'))
    try: # parse value into int
      if c is None:
        return (-999, (_!=0))
      else:
        d = -9
        try:
          d = int(c)
        except ValueError:
          if c == '-':
            _illegal_no_data_dash = True
          strange.append(current_line)
          return (d, True)
        return (d, (_!=0))
    except ValueError: # invalid value
      if _perr:
        print >> sys.stderr, "can't convert %s to int" % c
      strange.append(current_line)
      return (-9, True)

  # date
  elif param_index == DATE:
    c = line[begin:end].strip()
    _ = False
    if len(c) != 6: # report errors in date format
      if match('\\s+', c):
        if _perr:
          print >> sys.stderr, ' sumun1: embedded blanks in date.'
      else:
        if _perr:
          print >> sys.stderr, ' sumun1: date string should be 6 digits.'
      _ = True
    m = -9
    d = -9
    y = -9
    try: # parse date into ints
      m = int(c[:2])
      d = int(c[2:4])
      y = int(c[4:])
    except ValueError: # invalid date
      if _perr:
        print >> sys.stderr, " sumun1: invalid date %s" % c
      strange.append(current_line)
      return ((-9, -9, -9), True)
    # Validate day/month
    if d > 31: # invalid day
      if _perr:
        print >> sys.stderr, " sumun1: invalid day %s" % d
      strange.append(current_line)
      _ = True
    if m > 12: # invalid month
      if _perr:
        print >> sys.stderr, " sumun1: invalid month %s" % m
      strange.append(current_line)
      _ = True
    # Parse year (FIXME-AS) what happens in 2060?
    if int(y) > 60: # 1960
      y = str(1900 + int(y))
    else:
      y = str(2000 + int(y))
    return ((y, m, d), _)

  # time
  elif param_index == TIME:
    c = line[begin:end].strip()
    _ = False
    if len(c) != 4: # report errors in time format
      if match('\\s+', c):
        if _perr:
          print >> sys.stderr, ' sumun1: embedded blanks in time.'
        strange.append(current_line)
      else:
        if _perr:
          print >> sys.stderr, ' sumun1: time should be 4 digits.'
        strange.append(current_line)
      _ = True
    h = c[:2]
    m = c[2:]
    # Validate hour/minute
    if not match('[0-2][0-9]', h) or int(h) not in range(0,24):
      if _perr:
        print >> sys.stderr, " sumun1: invalid hour %s" % h
      strange.append(current_line)
      _ = True
    if not match('[0-5][0-9]', m) or int(m) not in range(0,60):
      if _perr:
        print >> sys.stderr, " sumun1: invalid minute %s" % m
      strange.append(current_line)
      _ = True
    return ((h, m), _)

  # coordinate
  elif param_index in [LATITUDE, LONGITUD]:
    c = line[begin:end].strip()
    _ = False
    try:
      d, m, h = split('\\s+', c)
    except ValueError:
      #print >> sys.stderr, 'sumun1: check your spacing.'
      strange.append(current_line)
      return ((0,0,''), True)
    hemisphere = h.strip()
    # report invalid hemisphere
    if ((param_index == LATITUDE and hemisphere not in ['N','S']) or
        (param_index == LONGITUD and hemisphere not in ['E','W'])):
      if _perr:
        print >> sys.stderr, " sumun1: invalid hemisphere %s" % hemisphere
      strange.append(current_line)
      _ = True
    deg = 0
    min = 0
    hemisphere = ''
    # Validate minutes/degrees
    try:
      min = float(m)
      if float(min) < 0.0 or float(min) > 60.0:
        if _perr:
          print >> sys.stderr, " sumun1: latitude %f minutes out of range" % min
        strange.append(current_line)
        _ = True
    except ValueError:
      if _perr:
        print >> sys.stderr, " sumun1: invalid latitude minutes %s" % m
      strange.append(current_line)
      _ = True
    try:
      deg = float(d)
      if float(deg) < 0.0 or float(deg) > 180.0:
        if _perr:
          print >> sys.stderr, " sumun1: latitude %f degrees out of range" % deg
        strange.append(current_line)
        _ = True
    except ValueError:
      if _perr:
        print >> sys.stderr, " sumun1: invalid latitude degrees %s" % d
      strange.append(current_line)
      _ = True
    return ((deg, min, hemisphere), _)

  # unknown column
  else:
    if _perr:
      print >> sys.stderr, "strange column index %d" % param_index
    unknown.append(current_line)
    return (None, True)

def sumun1(line, begin, end,):
  ''' Iteratively load all non-identifying parameters.
      line     current line
      begin    all beginning column limits
      end      all end column limits
  '''
  global _perr
  all_items = {}
  warn      = False
  all_items['SHIP'], all_items['EXPO'], _ = sumun1_load(
      line, EXPOCODE, begin[EXPOCODE], end[EXPOCODE])
  warn |= _
  for param in range(1,MXHDNG):
    all_items[HASH_NAMES[param]], _ = sumun1_load(
        line, param, begin[param], end[param])
    warn |= _
  '''
  all_items['WHPID'], _ = sumun1_load(
      line, SECTION, begin[SECTION], end[SECTION])
  warn |= _
  all_items['STNNBR'], _ = sumun1_load(
      line, STNNBR, begin[STNNBR], end[STNNBR])
  warn |= _
  all_items['CASTNO'], _ = sumun1_load(
      line, CASTNO, begin[CASTNO], end[CASTNO])
  warn |= _
  all_items['CTYPE'], _ = sumun1_load(
      line, CASTTYPE, begin[CASTTYPE], end[CASTTYPE])
  warn |= _
  all_items['DATE'], _ = sumun1_load(
      line, DATE, begin[DATE], end[DATE])
  warn |= _
  all_items['TIME'], _ = sumun1_load(
      line, TIME, begin[TIME], end[TIME])
  warn |= _
  all_items['TCODE'], _ = sumun1_load(
      line, TIMECODE, begin[TIMECODE], end[TIMECODE])
  warn |= _
  all_items['LATITUDE'], _ = sumun1_load(
      line, LATITUDE, begin[LATITUDE], end[LATITUDE])
  warn |= _
  all_items['LONGITUD'], _ = sumun1_load(
      line, LONGITUD, begin[LONGITUD], end[LONGITUD])
  warn |= _
  all_items['NAV'], _ = sumun1_load(
      line, NAV_CODE, begin[NAV_CODE], end[NAV_CODE])
  warn |= _
  all_items['BOTMUN'], _ = sumun1_load(
      line, DEPTH_UNC, begin[DEPTH_UNC], end[DEPTH_UNC])
  warn |= _
  all_items['BOTMCO'], _ = sumun1_load(
      line, CDEPTH, begin[CDEPTH], end[CDEPTH])
  warn |= _
  all_items['HAB'], _ = sumun1_load(
      line, BOTTOMHT, begin[BOTTOMHT], end[BOTTOMHT])
  warn |= _
  all_items['WHEEL'], _ = sumun1_load(
      line, WHEEL_MT, begin[WHEEL_MT], end[WHEEL_MT])
  warn |= _
  all_items['MXPRES'], _ = sumun1_load(
      line, PRESS_MX, begin[PRESS_MX], end[PRESS_MX])
  warn |= _
  all_items['NBOTS'], _ = sumun1_load(
      line, BOTTLES, begin[BOTTLES], end[BOTTLES])
  warn |= _
  all_items['PARAMS'], _ = sumun1_load(
      line, PARAMS, begin[PARAMS], end[PARAMS])
  warn |= _
  all_items['COMMENTS'], _ = sumun1_load(
      line, COMMENTS, begin[COMMENTS], end[COMMENTS])
  '''
  return (all_items, warn)

